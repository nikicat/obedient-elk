cluster.name: ${ name }
node:
    name: ${ this.name }-${this.ship.name}
    datacenter: ${ this.ship.datacenter }
transport.tcp.port: ${ this.ports['peer'] }
http.port: ${ this.ports['http'] }
network.publish_host: ${ this.ship.fqdn }
discovery:
    type: com.sonian.elasticsearch.zookeeper.discovery.ZooKeeperDiscoveryModule
    zen.multicast.enabled: False
sonian.elasticsearch.zookeeper:
    settings.enabled: False
    client.host: ${ ','.join(['{}:{}'.format(c.ship.fqdn, c.ports['client']) for c in containers if c.name == 'zookeeper']) }
    discovery.state_publishing.enabled: True
zookeeper.root: /${ name }/elasticsearch
cluster.routing.allocation:
    awareness:
        force.datacenter.values: ${ list(set([c.ship.datacenter for c in containers if c.name == 'elasticsearch'])) }
        attributes: datacenter
    cluster_concurrent_rebalance: 10
    disk.threshold_enabled: True
    node_initial_primaries_recoveries: 10
    node_concurrent_recoveries: 10
index:
    number_of_shards: 5
    number_of_replicas: 2
    mapper.default_mapping_location: mapping.json
    query.default_field: msg
    store.type: mmapfs
    translog.flush_threshold_ops: 50000
    refresh_interval: 10s
indices:
    recovery.concurrent_streams: 20
    memory.index_buffer_size: 30%
# Export monitoring data to self
marvel.agent.exporter.es.hosts: ${ ['{}:{}'.format(c.ship.fqdn, c.ports['http']) for c in containers if c.name == 'elasticsearch'] }
